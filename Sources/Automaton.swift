//
//  Automaton.swift
//  ReactiveAutomaton
//
//  Created by Yasuhiro Inami on 2016-05-07.
//  Copyright Â© 2016 Yasuhiro Inami. All rights reserved.
//

import Result
import ReactiveCocoa

/// Deterministic finite automaton.
public final class Automaton<State, Input>
{
    /// Basic state-transition function type.
    public typealias Mapping = (State, Input) -> State?

    /// Transducer (input & output) mapping with `NextProducerGenerator` as output,
    /// which generates "next input-producer" on successful transition
    /// and automatically starts it to emit **next input values** for continuous state-transitions.
    public typealias NextMapping = (State, Input) -> (State, NextProducerGenerator)?

    /// Next input producer generator type, i.e. `(input, fromState, toState) -> nextProducer`.
    public typealias NextProducerGenerator = (Input, State, State) -> SignalProducer<Input, NoError>

    /// `Reply` signal.
    public let replies: Signal<Reply<State, Input>, NoError>

    /// Current state.
    public let state: AnyProperty<State>

    private let _replyObserver: Observer<Reply<State, Input>, NoError>

    private var _disposable: Disposable?

    ///
    /// Initializer using `Mapping`.
    ///
    /// - Parameters:
    ///   - state: Initial state.
    ///   - input: `Signal<Input, NoError>` that automaton receives.
    ///   - mapping: Simple `Mapping` that designates next state only (no next input-producer).
    ///
    public convenience init(state initialState: State, input inputSignal: Signal<Input, NoError>, mapping: Mapping)
    {
        self.init(state: initialState, input: inputSignal, mapping: _compose(_toNextMapping, mapping))
    }

    ///
    /// Initializer using `NextMapping`.
    ///
    /// - Parameters:
    ///   - state: Initial state.
    ///   - input: `Signal<Input, NoError>` that automaton receives.
    ///   - mapping: `NextMapping` that designates next state and also generates next input-producer.
    ///   - strategy: `FlattenStrategy` that flattens next input-producer generated by `NextMapping`.
    ///
    public init(state initialState: State, input inputSignal: Signal<Input, NoError>, mapping: NextMapping, strategy: FlattenStrategy = .Merge)
    {
        let stateProperty = MutableProperty(initialState)
        self.state = AnyProperty(stateProperty)

        (self.replies, self._replyObserver) = Signal<Reply<State, Input>, NoError>.pipe()

        /// Recursive input-producer that sends inputs from `inputSignal`
        /// and also next producers generated by `NextMapping`.
        func recurInputProducer(inputProducer: SignalProducer<Input, NoError>, strategy: FlattenStrategy) -> SignalProducer<Input, NoError>
        {
            return SignalProducer<Input, NoError> { observer, disposable in
                inputProducer
                    .sampleFrom(stateProperty.producer)
                    .map { input, fromState in
                        return (input, fromState, mapping(fromState, input))
                    }
                    .startWithSignal { mappingSignal, mappingSignalDisposable in
                        //
                        // NOTE:
                        // `mergedProducer` (below) doesn't emit `.Interrupted` although `mappingSignal` sends it,
                        // so propagate it to returning producer manually.
                        //
                        disposable += mappingSignal.observeInterrupted {
                            observer.sendInterrupted()
                        }

                        //
                        // NOTE:
                        // Split `mappingSignal` into `successSignal` and `failureSignal` (and merge later) so that
                        // inner producers of `flatMap(strategy)` in `successSignal` don't get interrupted by mapping failure.
                        //
                        let successSignal = mappingSignal
                            .filterMap { input, fromState, mapped in
                                return mapped.map { (input, fromState, $0.0, $0.1) }
                            }
                            .flatMap(strategy) { input, fromState, toState, nextProducerGen -> SignalProducer<Input, NoError> in
                                return recurInputProducer(nextProducerGen(input, fromState, toState), strategy: strategy)
                                    .prefix(value: input)
                            }

                        let failureSignal = mappingSignal
                            .filterMap { input, fromState, mapped -> Input? in
                                return mapped == nil ? input : nil
                            }

                        let mergedProducer = SignalProducer(values: failureSignal, successSignal).flatten(.Merge)

                        disposable += mergedProducer.start(observer)
                        disposable += mappingSignalDisposable
                    }
            }
        }

        recurInputProducer(SignalProducer(signal: inputSignal), strategy: strategy)
            .sampleFrom(stateProperty.producer)
            .flatMap(.Merge) { input, fromState -> SignalProducer<Reply<State, Input>, NoError> in
                if let (toState, _) = mapping(fromState, input) {
                    return .init(value: .Success(input, fromState, toState))
                }
                else {
                    return .init(value: .Failure(input, fromState))
                }
            }
            .startWithSignal { replySignal, disposable in
                self._disposable = disposable

                stateProperty <~ replySignal
                    .flatMap(.Merge) { reply -> SignalProducer<State, NoError> in
                        if let toState = reply.toState {
                            return .init(value: toState)
                        }
                        else {
                            return .empty
                        }
                    }

                replySignal.observe(self._replyObserver)
            }
    }

    deinit
    {
        self._replyObserver.sendCompleted()
        self._disposable?.dispose()
    }
}

// MARK: Private

private func _compose<A, B, C>(g: B -> C, _ f: A -> B) -> A -> C
{
    return { x in g(f(x)) }
}

private func _toNextMapping<State, Input>(toState: State?) -> (State, Automaton<State, Input>.NextProducerGenerator)?
{
    if let toState = toState {
        return (toState, { _ in .empty })
    }
    else {
        return nil
    }
}
